Problem.create!([
  {title: "Defining Methods", description: "Create a method 'greet' that returns a greeting message. Greet should take in a name as an optional parameter", example_spec: "greet('pedro') == 'Hello, pedro'\ngreet() == 'Hello there'", solution_spec: "expect('it handles a greeting with an argument', greet('oskar') == 'Hello, oksar')\nexpect('it handles a greeting with no argument', greet == 'Hello there')", submitter_id: 2, rating: 0, category: "fundamentals"},
  {title: "Monkey Patching", description: "Add a method to the Array class that when called on an array, will return the sum of its elements", example_spec: "greet('pedro') == 'Hello, pedro'\ngreet() == 'Hello there'", solution_spec: "expect('it handles a greeting with an argument', greet('oskar') == 'Hello, oksar')\nexpect('it handles a greeting with no argument', greet == 'Hello there')", submitter_id: 2, rating: 0, category: "fundamentals"},
  {title: "name stuff", description: "optional params 'greet'", example_spec: "greet('bob') == 'Hello, bob'", solution_spec: "expect('it works', greet('otto') == 'Hello, otto')\r\nexpect('it works with nil', greet == 'Hello there')", submitter_id: 1, rating: 0, category: "fundamentals"},
  {title: "Find the max", description: "Find the max element in an array. Return both the index and its value", example_spec: "max([3,0,5,2]) == [2, 5]", solution_spec: "expect( 'it works', max([3,72,5,-7,6,10]) == [1, 72])", submitter_id: 1, rating: 0, category: "algorithms"},
  {title: "Second biggest", description: "Find the second biggest element of an array where every element is distinct. Can you do it in a single pass?", example_spec: "second_biggest([6,1,2,14,7]) == 7", solution_spec: "expect('it works', second_biggest([5,1,4,10,7,13]) == 10)", submitter_id: 1, rating: 1, category: "algorithms"},
  {title: "Powers", description: "Write a function that recursively computes b ^ a. ", example_spec: "pow(4,3) == 64\r\npow(5, 2) == 25", solution_spec: "expect('it works', pow(3, 2) == 9)", submitter_id: 1, rating: 0, category: "recursion"},
  {title: "Fibonnaci", description: "Write a recursive function for determining the n'th Fibonnaci number. The Fibonacci numbers are defined by the recurrence fib(n) = fib(n - 1) + fib(n 0 2). Start the sequence from fib(1)  := 0 and fib(2) := 1.", example_spec: "fib(11) == 55\r\nfib(9) == 21", solution_spec: "expect('it works', fib(10) == 34)", submitter_id: 1, rating: 0, category: "recursion"},
  {title: "Palindrome", description: "Write a function that will determine if a word is a palindrome ", example_spec: "is_palindrome?('civic') == true\r\nis_palindrome?('watermelon') == false", solution_spec: "expect('it works', is_palindrome?('racecar') == true)\r\nexpect('it works', is_palindrome?('racecat') == false)", submitter_id: 1, rating: 0, category: "logic"},
  {title: "Factors", description: "Write a function that takes an integer and returns an array of the integers factors in ascending order. ", example_spec: "factors(21) == [1, 3, 7, 21]\r\nfactors(16) == [1, 4, 16]", solution_spec: "expect('it works', factors(10) == [1,2,5,10])\r\n", submitter_id: 1, rating: 0, category: "logic"},
  {title: "Caesar Cipher", description: "The Caeser cipher is a simple cipher than encodes words by taking each letter and shifting it over 13 letters to the right. (i.e. 'a' becomes 'n', 'b' becomes 'o', etc...) The cipher wraps around to start again at 'a' for letters in the second half of the alphabet Write a function that will take a string and return its Caesar cipher encoded version. ", example_spec: "caesar_cipher('food') == 'sbbq'\r\ncaesar_cipher('xyz') == 'klm'", solution_spec: "expect('it works', caesar_cipher('watermelon') == 'jngrezryba')", submitter_id: 1, rating: 1, category: "logic"},
  {title: "Merge Sort!", description: "Implement merge sort using a helper merge(arr1, arr2) function that will combine two smaller sorted arrays into one big sorted array. ", example_spec: "merge([1,7,10], [2,6,20]) == [1, 2, 6, 7, 10, 20]\r\nmerge_sort([7,1,6,2,-4]) == [4, 1, 2, 6, 7]", solution_spec: "expect('it merges', merge([1,3,5], [2,4]) == [1,2,3,4,5]) \r\nexpect('it sorts', merge_sort([5,1,3,2,4]) == [1,2,3,4,5]) ", submitter_id: 1, rating: 1, category: "recursion"},
  {title: "Subsets", description: "Write a function that when takes a string, and returns an array consisting of all its substrings.", example_spec: "substrings('abc') == ['abc', 'ab', 'a', 'bc', 'b', 'c', '']", solution_spec: "expect('it works', substrings('ab') == ['ab', 'a', 'b', ''])", submitter_id: 1, rating: 2, category: "logic"},
  {title: "Actual subsets", description: "Write a function that will return all the subsets of an array of distinct elements.", example_spec: "def subsets(array)\r\n  if array.empty?\r\n    [[]]\r\n  else\r\n    subsets = []\r\n    sub_subsets = subsets(array[1..-1])\r\n    sub_subsets.each do |set|\r\n      subsets << [array.first] + set\r\n      subsets << set\r\n    end\r\n    subsets\r\n  end  \r\nend", solution_spec: "expect('go check out a linked-in page', false)", submitter_id: 1, rating: 2, category: "logic"},
  {title: "Arithmagic ", description: "Write a function that will adds two to its argument", example_spec: "foo(2) == 4\r\nfoo(10) == 12", solution_spec: "expect('it works', foo(4) == 6)", submitter_id: 1, rating: 0, category: "logic"},
  {title: "Identity", description: "Write a function that returns whatever you pass in", example_spec: "foo(3) == 3\r\nfoo('watermelon' ) == 'watermelon'", solution_spec: "expect('it returns stuff', foo(4) == 4)\r\nexpect('it returns stuff', foo('hello') == 'hello')", submitter_id: 1, rating: 0, category: "recursion"},
  {title: "Linked List", description: "Given the Linked-List class below, write a function that will walk the list and read its values in an array. ", example_spec: "class Node\r\n  attr_accessor :node, :next\r\n\r\n  def initialize(node)\r\n    @node = node\r\n  end\r\nend", solution_spec: "expect('i suggest you visit my friends, they'll have more to say', false)", submitter_id: 1, rating: 0, category: "data-structures"},
  {title: "Queue", description: "Use Array#shift and Array#push to implement a queue.", example_spec: "class Q\r\nend\r\n\r\nQ.push([1,2,3,4]);\r\nQ.shift # -> 1", solution_spec: "expect('i suggest you visit my friends', false)", submitter_id: 1, rating: 0, category: "data-structures"},
  {title: "Stack", description: "Implement a stack!", example_spec: "class Queue\r\nend", solution_spec: "expect('go check out linked in or something, true')", submitter_id: 1, rating: 0, category: "data-structures"},
  {title: "Doubly-linked list", description: "Implement a doubly-linked list that has connections both forwards and backwards. The spec will attempt to walk up and down a list created from your class definition.", example_spec: "class DoublyLinkedList\r\nend", solution_spec: "expect('send them to LL', false)", submitter_id: 1, rating: 1, category: "data-structures"},
  {title: "Priority Queue", description: "Implement a priority queue. ", example_spec: "class PriorityQueue\r\n  attr_accessor :heap\r\n\r\n  def initialize(params)\r\n  end\r\nend", solution_spec: "expect('it should work', false)", submitter_id: 1, rating: 1, category: "data-structures"},
  {title: "Reduce", description: "Open up the array class to imlement your own version of reduce. (Array will have forgotten how to reduce things,; it will remember Array#each though)", example_spec: "[1, 2, 3, 4].myReduce { |acc, curr| acc + curr } == 10", solution_spec: "expect('it should work', false)", submitter_id: 1, rating: 1, category: "fundamentals"},
  {title: "Selectq", description: "Open up array to implement your own version of Array#select (you are welcome to use Array#each to do so)", example_spec: "[1, 3, 5, 8, 3, 8].select { |i| i == 8} == [8, 8]", solution_spec: "expect('it works', false)", submitter_id: 1, rating: 1, category: "fundamentals"},
  {title: "Circular Linked List", description: "Around and around it goes...", example_spec: "class CircleList\r\n  attr_accessor :current\r\n  def initialize\r\n  end\r\nend", solution_spec: "expect('good luck', false)", submitter_id: 1, rating: 2, category: "data-structures"},
  {title: "Map", description: "Open up array and implement Array#map in terms of Array#each.", example_spec: "[1, 3, 5].map { |i| i * i } == [1, 9, 25]", solution_spec: "expect('it works', false)", submitter_id: 1, rating: 2, category: "fundamentals"},
  {title: "Quicksort!", description: "Find a pivot, re-arrange array with respect to pivot; repeat in sub-regions. ", example_spec: "quicksort([5,1,2,0,7]) == [0, 1, 2, 5, 7]", solution_spec: "expect('it works', false)", submitter_id: 1, rating: 2, category: "algorithms"},
  {title: "Bogosort ", description: "Can you make it work?", example_spec: "bogosort([5,1,3,7]) == #???", solution_spec: "expect('it is faster than stacksort', false)", submitter_id: 1, rating: 3, category: "algorithms"}
])
Solution.create!([
  {problem_id: 3, submitter_id: 1, content: "def greet(name = nil)\r\n  #Your c\r\n  name ? \"Hello, \#{name}\" : \"Hello there\"\r\nend"},
  {problem_id: 5, submitter_id: 1, content: "def max(array)\r\n  #Your code here\r\n  [array.find_index(array.max), array.max]\r\nend"},
  {problem_id: 6, submitter_id: 1, content: "def second_biggest(nums)\r\n  nums.select {|i| i < nums.max}.max\r\nend"}
])
User.create!([
  {username: "epicurious_george", password_digest: "$2a$10$WOGaDl9DE51FF.LODiZj5OOAN32AYE2qM7DKsJU7DOzXtyYeYex1G", token: "Sg3Fwj02bk1BXKBoFbNy_A"},
  {username: "pesto", password_digest: "$2a$10$LHJndeOP4gpGQFUCRFPIw.FNwkWvMs.XsGFs8umVe43Kuc5qjEcJi", token: "_jugnOhZREGI2V9H95PdbA"},
  {username: "otto", password_digest: "$2a$10$vaW76Ifq/wlAuIMMMNuIL.0leL6yXLMoiTQqvlEwmyA3ll3DxWJIO", token: "KXdScPpKjYKVhbE4i8XDMw"}
])
