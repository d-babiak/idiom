<div id="left-container" class='col-md-8 fadein'>

  <div id="infovis" style='width: 780px; height: 780px; margin: 0 auto;'>
  </div>
</div>

<div id="right-container" class='col-md-4'>
</div>


<div id='node-modal' class='modal fade'tab-index='-1'>
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal">
          <span>&times;</span>
          <span class="sr-only">Close</span></button>
        <h4 class="modal-title" id="myModalLabel">Node info</h4>
      </div>
      <div class="modal-body align-left">
        <a href='#' id='problem-link' class='center'>
          This will be replaced.
        </a>
        <div id='#problem-description'>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
    App.center = function(kill) {
      if (kill) {
        App._center = undefined
      } else {
        if (App._center) return App._center;

        ht.graph.each(function(node) {
          if (node._depth === 0) {
            return (App._center = node);
          }
        });
      }
    };


  $(function(){
    var labelType, useGradients, nativeTextSupport, animate;

    (function() {
      var ua = navigator.userAgent,
          iStuff = ua.match(/iPhone/i) || ua.match(/iPad/i),
          typeOfCanvas = typeof HTMLCanvasElement,
          nativeCanvasSupport = (typeOfCanvas == 'object' || typeOfCanvas == 'function'),
          textSupport = nativeCanvasSupport
            && (typeof document.createElement('canvas').getContext('2d').fillText == 'function');
      //I'm setting this based on the fact that ExCanvas provides text support for IE
      //and that as of today iPhone/iPad current text support is lame
      labelType = (!nativeCanvasSupport || (textSupport && !iStuff))? 'Native' : 'HTML';
      nativeTextSupport = labelType == 'Native';
      useGradients = nativeCanvasSupport;
      animate = !(iStuff || !nativeCanvasSupport);
    })();


  function init(){
    //init data
    var json = App.Tree(App.problems.map(function(obj) {
        return obj.attributes;
      })
    );

    var graph = "[{id:'root', adjacencies: ['node0']}, {id:'node0', name:'node0 name'}]";


    //end
    var infovis = document.getElementById('infovis');
    var w = infovis.offsetWidth - 50, h = infovis.offsetHeight - 50;

    //init Hypertree
    var ht = window.ht = new $jit.Hypertree({
      //id of the visualization container
      injectInto: 'infovis',
      //canvas width and height
      width: w,
      height: h,
      offset: 0.15,
      //Change node and edge styles such as
      //color, width and dimensions.
      Node: {
          overridable: true,
          dim: 9,
          color: "#f00"
      },
      Edge: {
          lineWidth: 2,
          dim: 2,
          color: "#088"
      },
      Events: {
        enable: true,
        type: 'Native',
        onClick: function(node, eventInfo, e){
          //kill current center
          App.center(true);
          $('#right-container').fadeOut(700)

          setTimeout(function() {
            if (App.currentView) { App.currentView.remove(); }
            var root;
            ht.graph.each(function(g) {if (g._depth === 0) { root = g; }});
            if (problem = App.problems.get(root.id)) {
              var view = new App.Views.ProblemsShowView({model: problem});
              App.currentView = view;
              $('#right-container').html(view.render().$el);
              $('#right-container').fadeIn(700);
            } else {
              App.currentView = null;
              $('#right-container').html('');
            }
          }, 700);
        }
      },

      onBeforeCompute: function(node){
      },
      //Attach event handlers and add text to the
      //labels. This method is only triggered on label
      //creation
      onCreateLabel: function(domElement, node){
          domElement.innerHTML = node.name;
          $jit.util.addEvent(domElement, 'click', function () {
              ht.onClick(node.id, {
                  onComplete: function() {
                      ht.controller.onComplete();
                  }
              });
          });
      },
      //Change node styles when labels are placed
      //or moved.
      onPlaceLabel: function(domElement, node){
        var title = (node._depth > 0) ? 'some title here' : '';
        domElement.setAttribute('data-toggle', 'tooltip');
        domElement.setAttribute('data-placement', 'top');
        domElement.setAttribute('data-original-title', title);
        $(domElement).tooltip();

          var style = domElement.style;
          style.display = '';
          style.cursor = 'pointer';
          if (node._depth <= 1) {
              style.fontSize = "0.8em";
              style.color = "#ddd";
          } else if (node._depth == 2) {
              style.fontSize = "0.7em";
              style.color = "#bbb";
          // } else if (node._depth == 3) {
          //     style.fontSize = "0.5em";
          //     style.color = "#777";
          } else if (node._depth == 3)  {
              style.fontSize = "0.6em";
              style.color = "#aaa";

          } else {
              style.display = 'none';
          }

          var left = parseInt(style.left);
          var w = domElement.offsetWidth;
          style.left = (left - w / 2) + 'px';
      },

      onComplete: function(){
          var node = ht.graph.getClosestNodeToOrigin("current");
      },

    });
    //load JSON data.
    ht.loadJSON(json);
    //compute positions and plot.
    ht.refresh();
    //end
    ht.controller.onComplete();

    ht.addNode = function() {
      var trueGraph = eval('(' + graph + ')');
      var type = 'fade:seq';
      ht.op.sum(trueGraph, {
        type: type,
        fps: 30,
        duration: 1000
      });
    };
  }
    init();
  });


</script>
